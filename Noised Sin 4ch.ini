signal void  analog(void){
float volts; // peak-to-peak volatage
float frequency; // output frequency in Hz
float offset; // volatge offset
float duration; // duration in Seconds
float val0;
float val1;
float val2;
float val3;

volts = 1.0; // kumatomorfi apo 0.2 ws 2.2
offset = 1.2;
frequency = 50.0;
duration = 1.0;
printf ("Sine Wave Signal on AD Channel 0.\n");
printf ("Sine Wave Signal on AD Channel 1.\n");
printf ("Sine Wave Signal on AD Channel 2.\n");
printf ("Sine Wave Signal on AD Channel 3.\n");

while(1){
val0= __sin(frequency * (((float) STATES) / CLOCK) * 2 * 3.1415926);
val1= __sin((frequency * (((float) STATES) / CLOCK) * 2 * 3.1415926)+1.5707963);
val2= __sin((frequency * (((float) STATES) / CLOCK) * 2 * 3.1415926)+3.1415926);
val3= __sin((frequency * (((float) STATES) / CLOCK) * 2 * 3.1415926)+4.7123889);

adc0 = (val0 * volts) + offset + (((((float) rand(0)) / 32767.0)/2.0)- 0.25) ; //noise -0.25 to 0.25
swatch (0.00001);
adc1 = (val1 * volts) + offset + (((((float) rand(0)) / 32767.0)/2.0)- 0.25) ; //noise -0.25 to 0.25
swatch (0.00001);
adc2 = (val2 * volts) + offset + (((((float) rand(0)) / 32767.0)/2.0)- 0.25) ; //noise -0.25 to 0.25
swatch (0.00001);
adc3 = (val3 * volts) + offset + (((((float) rand(0)) / 32767.0)/2.0)- 0.25) ; //noise -0.25 to 0.25
swatch (0.00001); 
}
}
 
analog();
